# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

## Overrides for generated resource names
# See templates/_helpers.tpl
# nameOverride:
# fullnameOverride:

master:
  componentName: jenkins-master
  # currently using my own container but it is unnecessary
  image: "mjmsfdc/jenkins"
  imageTag: "latest"
  imagePullPolicy: "Always"
  component: "jenkins-master"
  useSecurity: true
  adminUser: admin
  # AdminPassword: <defaults to random>
  cpu: "200m"
  memory: "256Mi"
  servicePort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # <to set explicitly, choose port between 30000-32767>
  serviceType: NodePort
  nodePort: 32000
  serviceAnnotations: {}
  containerPort: 8080
  # Enable Kubernetes Liveness and Readiness Probes
  healthProbes: true
  healthProbesTimeout: 60
  slaveListenerPort: 50000
  loadBalancerSourceRanges:
    - 0.0.0.0/0
  # List of plugins to be install during Jenkins master start
  installPlugins:
    - kubernetes:latest
    - workflow-multibranch:latest
    - workflow-aggregator:latest
    - workflow-job:latest
    - credentials-binding:latest
    - git:latest
    - pipeline-stage-view:latest
    - pipeline-model-definition:latest
  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  scriptApproval:
    - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
    - "new groovy.json.JsonSlurperClassic"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods leftShift java.util.Map java.util.Map"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods split java.lang.String"
  customConfigMap: false
  nodeSelector: {}
  tolerations: {}

  # not sure how to get this code block out of this file
  initScripts:
    init_project: |-
      #!/usr/bin/env groovy
      import jenkins.model.*
      import hudson.util.PersistedList
      import jenkins.branch.*
      import jenkins.plugins.git.*
      import org.jenkinsci.plugins.workflow.multibranch.*

      // Git repo url containing a Jenkinsfile
      String gitRepoUrl = "https://github.com/michaeljmurphy/minikube-helm-jenkins"

      // Job name based on repository name
      String jobName = gitRepoUrl.tokenize(".")[-2].tokenize("/")[-1]


      // Create MultiBranch pipeline
      Jenkins jenkins = Jenkins.get()
      WorkflowMultiBranchProject mbp = jenkins.createProject(WorkflowMultiBranchProject.class, jobName)

      // Define Git repo
      //GitSCMSource(id, gitRepo, credentialsId, includes, excludes, ignoreOnPushNotifications)
      GitSCMSource gitSCMSource = new GitSCMSource("not_null", gitRepoUrl, "", "*", "", false)
      BranchSource branchSource = new BranchSource(gitSCMSource)

      // Add Git repo as source to MBP
      PersistedList sources = mbp.getSourcesList()
      sources.add(branchSource)

      // Trigger initial build (scan)
      jenkins.getItem(jobName).scheduleBuild()

      // Save config
      jenkins.save()

agent:
  enabled: true
  image: jenkins/jnlp-slave
  imageTag: "latest"
  component: "jenkins-slave"
  privileged: false
  cpu: "200m"
  memory: "256Mi"
  # You may want to change this to true while testing a new image
  alwaysPullImage: true
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  volumes:
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
  nodeSelector: {}

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # ExistingClaim:
  ## jenkins data Persistent Volume Storage Class
  storageClass: jenkins-pv

  annotations: {}
  accessMode: ReadWriteOnce
  size: 20Gi
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  apiVersion: networking.k8s.io/v1
